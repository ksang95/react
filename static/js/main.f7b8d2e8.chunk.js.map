{"version":3,"sources":["logo.svg","component/Test.js","component/TestList.js","component/OrderType.js","component/PayInfo.js","component/TestComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Test","this","props","order","orderId","productName","productPrice","orderColor","orderSize","orderQuantity","Component","TestList","list","data","map","key","defaultProps","OrderType","info","deliverId","invoice","deliverName","deliverLocation","deliverPostalCode","deliverPhone","storesName","storesLocation","PayInfo","sum","totalPrice","totalPay","orderDate","gradeDiscount","couponDiscount","pointUse","TestComponent","state","axios","get","response","reduce","prev","i","orderPrice","setState","console","log","getData","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7b8d2e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nclass Test extends Component {\n\n    render(){\n        const {orderId,productName,productPrice,orderColor,orderSize,orderQuantity} = this.props.order;\n        return (\n            <tr>\n                <td>{orderId}</td>\n                <td>{productName}</td>\n                <td>{productPrice}</td>\n                <td>{orderColor}</td>\n                <td>{orderSize}</td>\n                <td>{orderQuantity}</td>\n            </tr>\n        )\n    }\n}\n\nexport default Test;","import React, {Component} from 'react';\nimport Test from './Test';\n\nclass TestList extends Component{\n    static defaultProps={\n        data:[]\n    }\n\n    render(){\n        const {data}=this.props;\n        const list = data.map(\n            (order) => (<Test key={order.orderId} order={order}/>)\n        );\n\n        return (\n            <table>\n                <thead><tr><th>주문id</th><th>상품명</th><th>주문가격</th><th>색상</th><th>사이즈</th><th>수량</th></tr></thead>\n                <tbody>{list}</tbody>\n            </table>\n        )\n    }\n}\n\nexport default TestList;","import React, { Component } from 'react';\n\nclass OrderType extends Component {\n    static defaultProps = {\n        info: null\n    }\n\n    render() {\n        const { info } = this.props;\n        if (info) {\n            if (info.deliverId) {\n                const { invoice, deliverName, deliverLocation, deliverPostalCode, deliverPhone } = info;\n                return (\n                    <div>\n                        <div>\n                            <span>송장번호</span> <span>{invoice}</span>\n                        </div>\n                        <div>\n                            <span>수령인</span> <span>{deliverName}</span>\n                        </div>\n                        <div>\n                            <span>배송지 주소</span> <span>{deliverLocation}</span>\n                        </div>\n                        <div>\n                            <span>배송지 우편번호</span> <span>{deliverPostalCode}</span>\n                        </div>\n                        <div>\n                            <span>전화번호</span>< span>{deliverPhone}</span>\n                        </div>\n                    </div>\n                );\n            }\n            else {\n                const { storesName, storesLocation } = info;\n                return (\n                    <div>\n                        <div>\n                            <span>픽업 매장</span><span>{storesName}</span>\n                            <span>주소</span><span>{storesLocation}</span>\n\n                        </div>\n\n                    </div>\n                );\n            }\n        }\n        else\n            return (<div></div>);\n\n    }\n}\n\nexport default OrderType;","import React, { Component } from 'react';\n\nclass PayInfo extends Component {\n    static defaultProps = {\n        info: []\n    }\n    render() {\n        if (this.props.info) {\n            const sum = this.props.totalPrice;\n            const { totalPay, orderDate, gradeDiscount, couponDiscount, pointUse } = this.props.info;\n            return (\n                <div>\n                    <div><span>주문금액</span><span>{sum}</span></div>\n                    <div><span>주문날짜</span><span>{orderDate}</span></div>\n                    <div><span>등급할인</span><span>-{gradeDiscount}</span></div>\n                    <div><span>쿠폰할인</span><span>-{couponDiscount?couponDiscount:0}</span></div>\n                    <div><span>적립금사용</span><span>-{pointUse}</span></div>\n                    <div><span>결제금액</span><span>{totalPay}</span></div>\n                </div>\n            );\n        }\n        else return (<div></div>);\n    }\n}\n\nexport default PayInfo;","import React, {Component, Fragment} from 'react';\nimport axios from 'axios';\nimport TestList from './TestList';\nimport OrderType from './OrderType';\nimport PayInfo from './PayInfo';\n\nclass TestComponent extends Component {\n\n    state={\n        data:[],\n        info:null,\n        totalPrice:null\n    }\n    async getData(){\n        try{\n            const response=await axios.get(\"/home\");\n            const sum = response.data.reduce((prev, i) => {\n                return prev + i.orderPrice;\n            }, 0);\n            this.setState({\n                data:response.data,\n                info:response.data[0],\n                totalPrice:sum\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    componentDidMount(){\n        this.getData();\n    }\n\n    render (){\n        return (\n            <Fragment>\n            <TestList data={this.state.data}></TestList>\n            <OrderType info={this.state.info} />\n            <PayInfo totalPrice={this.state.totalPrice} info={this.state.info} />\n            </Fragment>\n\n        );\n    }\n}\n\nexport default TestComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TestComponent from './component/TestComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TestComponent></TestComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}